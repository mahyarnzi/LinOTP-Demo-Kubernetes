{{- $projectName := .Values.global.project_name}}
{{- with .Values}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .deploy_name}}
  
spec:
  replicas: {{ .replicas}}
  selector:
    matchLabels:
      name: {{ .deploy_name}}
      app: {{ $projectName}}
  
  serviceName: {{ .service.name}}

  template:
    metadata:
      labels:
        name: {{ .deploy_name}}
        app: {{ $projectName}}   
    
    spec:
      initContainers:
      - name: {{ .containers.init.name}}
        image: {{ .containers.init.image}}
        imagePullPolicy: {{ .containers.init.imagePullPolicy}}
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi          
        
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
      
      - name: {{ .containers.clone.name}}
        image: {{ .containers.clone.image}}
        imagePullPolicy: {{ .containers.clone.imagePullPolicy}}
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on primary (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only {{ .deploy_name}}-$(($ordinal-1)).{{ .service.name}} 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql          
        
        volumeMounts:
        - name: {{ .storage.name}}
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
      
      containers:
      - name: {{ .containers.main.name}}
        image: {{ .containers.main.image}}
        imagePullPolicy: {{ .containers.main.imagePullPolicy}}
        envFrom:
            - secretRef:
                name: {{ .secret.name}}
        ports:
        - name: {{ .containers.main.name}}
          containerPort: {{ .containers.main.containerPort}}

        volumeMounts:
        - name: {{ .storage.name}}
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        
        resources:
          requests:
            memory: {{ .containers.main.resource.memory.need}}
            cpu: {{ .containers.main.resource.cpu.need}}
          limits:
              memory: {{ .containers.main.resource.memory.limit}}
              cpu: {{ .containers.main.resource.cpu.limit}}

        livenessProbe:
          exec:
            command:
            - bash
            - "-c"
            - |
              mysqladmin -uroot -p$MYSQL_ROOT_PASSWORD ping &> /dev/null
          initialDelaySeconds: {{ .containers.main.livenessProbe.initialDelaySeconds}}
          periodSeconds: {{ .containers.main.livenessProbe.periodSeconds}}
          timeoutSeconds: {{ .containers.main.livenessProbe.timeoutSeconds}}
        
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command:
            - /bin/sh
            - -ec
            - set -ex
            - >-
              mysql -h127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD -e'SELECT 1'
          initialDelaySeconds: {{ .containers.main.readinessProbe.initialDelaySeconds}}
          periodSeconds: {{ .containers.main.readinessProbe.periodSeconds}}
          timeoutSeconds: {{ .containers.main.readinessProbe.timeoutSeconds}}
      
      - name: {{ .containers.backup.name}}
        image: {{ .containers.backup.image}}
        imagePullPolicy: {{ .containers.backup.imagePullPolicy}}
        ports:
        - name: {{ .containers.backup.name}}
          containerPort: {{ .containers.backup.containerPort}}
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from primary. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -uroot -p$MYSQL_ROOT_PASSWORD -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            mysql -h 127.0.0.1 -p$MYSQL_ROOT_PASSWORD\
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='{{ .deploy_name}}-0.{{ .service.name}}', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD='$MYSQL_ROOT_PASSWORD', \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password="$MYSQL_ROOT_PASSWORD          
        
        volumeMounts:
        - name: {{ .storage.name}}
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        
        resources:
          requests:
            cpu: {{ .containers.backup.resource.cpu.need}}
            memory: {{ .containers.backup.resource.memory.need}}
          limits:
            cpu: {{ .containers.backup.resource.cpu.limit}}
            memory: {{ .containers.backup.resource.memory.limit}}
            
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: {{ .configMap.name}}
    
  volumeClaimTemplates:
  - metadata:
      name: {{ .storage.name}}
    
    spec:
      accessModes: [{{ .storage.accessModes}}]
      resources:
        requests:
          storage: {{ .storage.capacity}}
      storageClassName: {{ .storage.storageClassName}}

    {{- end}}
